AWSTemplateFormatVersion: 2010-09-09
Description: State resources for message-board app

Resources:

########## CONTENT DELIVERY NETWORK ##########

  CloudFront:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Retain
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: karlaru-mb.s3.eu-north-1.amazonaws.com
            Id: S3-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          TargetOriginId: S3-bucket
          ViewerProtocolPolicy: https-only
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'comment'



############### DATA STORAGE ###############

# Bucket for storing images and website static files (css)
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: karlaru-mb
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: images/
            Function: !GetAtt ImgScaler.Arn

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Action: 's3:GetObject'
            Resource: arn:aws:s3:::karlaru-mb/*

          - Effect: Allow
            Principal:
              AWS: '978039897892'
            Action: [
                      "s3:PutObject",
                      "s3:GetObject",
                      "s3:DeleteObject"
                    ]
            Resource: arn:aws:s3:::karlaru-mb/*

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: messages
      AttributeDefinitions:
        - AttributeName: message_id
          AttributeType: S
      KeySchema:
        - AttributeName: message_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: OLD_IMAGE



############## LAMBDA FUNCTIONS #################

# Creating thumbnails for pictures
  ImgScaler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: img_scaler
      Code:
        S3Bucket: mb-conf-folder
        S3Key: img_scaler.zip
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      PackageType: Zip
      Handler: img_scaler.lambda_handler
      Timeout: 60
      MemorySize: 256
      Layers:
        - !Ref Pillow

  LambdaS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImgScaler
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3Bucket.Arn

  Pillow:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: pillow
      Content:
        S3Bucket: mb-conf-folder
        S3Key: pillow_layer.zip
      CompatibleRuntimes:
        - python3.8

# Deleting images when message is deleted
  ImgDeleter:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: delete-image
      Code:
        S3Bucket: mb-conf-folder
        S3Key: img_delete.zip
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      PackageType: Zip
      Handler: img_delete.lambda_handler

  ImagesDeleteTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 120
      Enabled: true
      EventSourceArn: !GetAtt MessagesTable.StreamArn
      FunctionName: !Ref ImgDeleter
      StartingPosition: LATEST

# Role for Lambda functions
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:DeleteObject",
                          "dynamodb:DescribeStream",
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:ListStreams",
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ]
                Resource: [
                          "arn:aws:s3:::karlaru-mb/*",
                          "arn:aws:dynamodb:eu-north-1:978039897892:table/messages/stream/*",
                          "arn:aws:logs:eu-north-1:978039897892:log-group:/aws/*"
                        ]
