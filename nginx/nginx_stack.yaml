AWSTemplateFormatVersion: 2010-09-09
Description: Nginx based deployment

Resources:

################### DOMAIN ###################

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z00583582NH093E9U0PRK
      Name: nginx.karlaru.com
      Type: A
      TTL: 60
      ResourceRecords:
        - !GetAtt nginxInstance.PublicIp


############## EC2 #################

# Instance for running NGINX
  nginxInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-08bdc08970fcbd34a
      KeyName: aws_key
      IamInstanceProfile: !Ref nginxInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: Subnet
          GroupSet:
            - !Ref nginxSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '10'
            DeleteOnTermination: 'true'
      Tags:
        - Key: "Name"
          Value: "nginx"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash 
            aws s3 cp s3://mb-conf-folder/install_nginx_docker.sh .
            sudo bash install_nginx_docker.sh

  nginxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https incoming
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 88.196.254.0/24

  nginxInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: NginxProfile
      Roles:
        - Ref: "nginxRole"

  nginxRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [
                  "s3:GetObject",
                  "s3:PutObject",
                  "dynamodb:PutItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan"
                ]
                Resource: [
                  "arn:aws:s3:::mb-conf-folder/*",
                  "arn:aws:s3:::karlaru-mb/*",
                  "arn:aws:dynamodb:eu-north-1:978039897892:table/messages",
                  "arn:aws:dynamodb:eu-north-1:978039897892:table/users"
                ]


############## NETWORKING #################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
